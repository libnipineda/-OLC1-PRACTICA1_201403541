VERSION 1.1 DE GRAMATICA PROYECTO 2 TRADUCTOR DE C# A PYTHON
------------------------------------------------------------
<INICIO> := class cadena {<ESTRUCTURA>}
<ESTRUCTURA> := static void Main(string[] args){<INSTRUCCION>}
<INSTRUCCION> := <DECLARACION> <INSTRUCCION>
               | <IMPRIMIR> <INSTRUCCION>
               | <SWITCH> <INSTRUCCION>
               | <IF> <INSTRUCCION>
               | <FOR> <INSTRUCCION>
<DECLARACION> := <TIPO> <LISTA_VAR>
               | <LISTA_VAR>
<TIPO> := int
        | float
        | char
        | string
        | String
        | bool
<LISTA_VAR> := [] cadena = <VALOR_ARREGLO> <LISTA_VAR>
             | cadena <VALOR_ASIGNACION> <LISTA_VAR>
             | epsilon                       
<VALOR_ARREGLO> := new <TIPO>[];
                 | {<TIPO_VAR> <ARGUMENTO>};
<VALOR_ASIGNACION> := , <OTROS> <VALOR_ASIGNACION>
                    | = <TIPO_VAR> <EXPRESION> <VALOR_ASIGNACION>
                    | ; <VALOR_ASIGNACION>
                    | <VALOR1> <EXPRESION> <VALOR_ASIGNACION>
                    | epsilon
<OTROS> := <TIPO> cadena
         | <TIPO_VAR>
<TIPO_VAR> := num
            | cadena
            | decimal
            | false
            | true
<ARGUMENTO> := , <TIPO_VAR> <ARGUMENTO>
             | epsilon
<IMPRIMIR> := <GRAFICAR_V>
            | Console.WriteLine(<LISTADO_IMPRIMIR>);
<LISTADO_IMPRIMIR> := <TIPO_VAR> <LISTADO>
<LISTADO> := + <TIPO_VAR> <LISTADO>
           | epsilon
<GRAFICAR_V> := graficarVector(cadena, cadena);
<SWITCH> := switch(cadena){<ESTRUCTURA_SWITCH>}
<ESTRUCTURA_SWITCH> := case <TIPO_VAR> : <INSTRUCCION> break; <EST_SWITP>
<EST_SWITP> := <ESTRUCTURA_SWITCH>
             | default : <INSTRUCCION> break;
<EXPRESION> := <LISTA_ARIT> <M>
             | <M>
             | epsilon
<M> := <VALOR1>
     | (<LISTA_VAR>)
<VALOR1> := cadena
          | num
          | decimal
<LISTA_ARIT> := /
              | *
              | +
              | -  
<IF> := if(<SENTENCIA>){<ARGUMENTO_IF>}<IFP>
<IFP> := else<INST_IF>
       | epsilon
<INST_IF> := {<ARGUMENTO_IF>}
           | <IF>
<SENTENCIA> := <VALOR1> <LISTA_OP> <VALOR1>
<LISTA_OP> := ==
            | >
            | < <N>
            | !=
<ARGUMENTO_IF> := <INSTRUCCION>
<N> := =
     | epsilon
<FOR> := for(<OP>; <OP1>; <INCREMENTO>){<INSTRUCCION>}
<OP> := <TIPO> cadena = <VALOR1>
<OP1> := cadena <LISTA_OP> <VALOR1>
<INCREMENTO> := cadena<INP>
<INP> := ++
       | --
       